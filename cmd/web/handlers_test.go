package main

import (
	"bytes"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"

	"poc.eduardo-luz.eu/internal/assert"
)

func TestPingWithHelpers(t *testing.T) {
	app := newTestApplication(t)

	config := config{}
	ts := newTestServer(t, app.routes(config))
	defer ts.Close()

	code, _, body := ts.get(t, "/ping")

	assert.Equal(t, code, http.StatusOK)
	assert.Equal(t, body, "OK")
}

func TestSnippetView(t *testing.T) {
	//creates app struct with the mocked deps
	app := newTestApplication(t)

	config := config{}
	//stablish a new test server for running e2e tests
	ts := newTestServer(t, app.routes(config))
	defer ts.Close()

	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody string
	}{
		{
			name:     "Valid ID",
			urlPath:  "/sni/view/1",
			wantCode: http.StatusOK,
			wantBody: "Content",
		},
		{
			name:     "Invalid ID",
			urlPath:  "/sni/view/2",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Negative ID",
			urlPath:  "/sni/view/-2",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "String ID",
			urlPath:  "/sni/view/a",
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Empty ID",
			urlPath:  "/sni/view/",
			wantCode: http.StatusNotFound,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			code, _, body := ts.get(t, tt.urlPath)

			assert.Equal(t, code, tt.wantCode)

			if tt.wantBody != "" {
				assert.StringContains(t, body, tt.wantBody)
			}
		})
	}
}

func TestPingE2E(t *testing.T) {
	//creates an appl struct with some mocks required by logRequest and recoverPanic middlewares
	app := &application{
		errorLog: log.New(io.Discard, "", 0),
		infoLog:  log.New(io.Discard, "", 0),
	}

	//creates a new test server
	//to create it is required to pass a http.Handler as parameter. it will be called every time
	//the server receives a request
	config := config{}
	ts := httptest.NewTLSServer(app.routes(config))
	defer ts.Close()

	//test server client to send requests to the server
	clientServer := ts.Client()
	response, err := clientServer.Get(ts.URL + "/ping")
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, response.StatusCode, http.StatusOK)
	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)

	if err != nil {
		t.Fatal(err)
	}
	bytes.TrimSpace(body)

	assert.Equal(t, string(body), "OK")
}

func TestPing(t *testing.T) {
	rr := httptest.NewRecorder()

	req, err := http.NewRequest(http.MethodGet, "/", nil)
	if err != nil {
		// mark as failed, log the error and stop the execution of the current test
		t.Fatal(err)
	}

	//call the handler passing the ResponseRecorder and the request
	ping(rr, req)

	//call the Result of the ResponseRecorder to get the http.Response generated by the ping handler
	rs := rr.Result()

	assert.Equal(t, rs.StatusCode, http.StatusOK)

	defer rs.Body.Close()

	body, err := io.ReadAll(rs.Body)
	if err != nil {
		t.Fatal(err)
	}

	bytes.TrimSpace(body)

	assert.Equal(t, string(body), "OK")
}

func TestUserSignup(t *testing.T) {
	config := config{}
	// test application with mocked deps
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes(config))
	defer ts.Close()

	_, _, body := ts.get(t, "/user/signup")
	csrfToken := extractCSRFToken(t, body)

	t.Logf("CSRF token is: %q", csrfToken)

}
